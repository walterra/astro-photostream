---
/**
 * Main photo gallery with pagination - follows Astro conventions
 * Handles URLs: /photos, /photos/2, /photos/3, etc.
 * Based on reference implementation patterns
 */
import { getCollection } from 'astro:content';
import { getConfig } from 'virtual:astro-photo-stream/config';
import PhotoStream from '../../components/PhotoStream.astro';
import MultiMarkerMap from '../../components/MultiMarkerMap.astro';
import type { PhotoMetadata } from '../../types.js';
import type { GetStaticPaths } from 'astro';

// Get configuration
const config = getConfig();

export const getStaticPaths: GetStaticPaths = async ({ paginate }) => {
  // Get all photos from content collection
  const allPhotos = await getCollection('photos', ({ data }) => {
    return !data.draft;
  });

  // Sort photos by publish date (newest first)
  const sortedPhotos = allPhotos
    .sort((a, b) => new Date(b.data.publishDate).getTime() - new Date(a.data.publishDate).getTime());

  // Convert to PhotoMetadata format for pagination
  const photos: PhotoMetadata[] = sortedPhotos.map(photo => ({
    id: photo.slug,
    title: photo.data.title,
    description: photo.data.description,
    coverImage: photo.data.coverImage,
    camera: photo.data.camera,
    lens: photo.data.lens,
    settings: photo.data.settings,
    location: photo.data.location,
    tags: photo.data.tags,
    publishDate: new Date(photo.data.publishDate),
    draft: photo.data.draft || false
  }));

  // Use Astro's built-in paginate function
  return paginate(photos, { 
    pageSize: config.gallery.itemsPerPage,
    params: {},
    props: {
      totalPhotos: photos.length,
      config
    }
  });
};

// Get paginated data
const { page, totalPhotos, config } = Astro.props;
const photos = page.data;

// Get photos with location data for map
const photosWithLocation = photos.filter((photo: PhotoMetadata) => 
  photo.location?.latitude && photo.location?.longitude
);

// Calculate date range for this page
const dates = photos.map((p: PhotoMetadata) => p.publishDate).sort((a, b) => b.getTime() - a.getTime());
const newestDate = dates[0];
const oldestDate = dates[dates.length - 1];
const dateRange = newestDate && oldestDate && newestDate !== oldestDate
  ? `${oldestDate.getFullYear()} - ${newestDate.getFullYear()}`
  : newestDate?.getFullYear().toString() || '';

// Page metadata
const isFirstPage = page.currentPage === 1;
const pageTitle = isFirstPage 
  ? `Photo Gallery - ${config.seo.siteName || 'Photo Stream'}`
  : `Photo Gallery - Page ${page.currentPage} - ${config.seo.siteName || 'Photo Stream'}`;

const pageDescription = isFirstPage
  ? `Browse through ${totalPhotos} photographs captured with love for photography and technology. ${dateRange ? `Photos from ${dateRange}.` : ''}`
  : `Browse photographs - page ${page.currentPage} of ${page.lastPage}. ${dateRange ? `Photos from ${dateRange} on this page.` : ''}`;
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>{pageTitle}</title>
    <meta name="description" content={pageDescription} />
    
    <!-- Open Graph -->
    <meta property="og:title" content={pageTitle} />
    <meta property="og:description" content={pageDescription} />
    <meta property="og:type" content="website" />
    <meta property="og:url" content={Astro.url} />
    {config.seo.siteName && <meta property="og:site_name" content={config.seo.siteName} />}
    
    <!-- Twitter -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content={pageTitle} />
    <meta name="twitter:description" content={pageDescription} />
    {config.seo.twitterHandle && <meta name="twitter:creator" content={config.seo.twitterHandle} />}
    
    <!-- Canonical URL -->
    <link rel="canonical" href={Astro.url} />
    
    <!-- Pagination SEO -->
    {page.url.prev && <link rel="prev" href={page.url.prev} />}
    {page.url.next && <link rel="next" href={page.url.next} />}
    {!isFirstPage && <meta name="robots" content="noindex" />}
    
    <!-- JSON-LD structured data -->
    <script type="application/ld+json">
      {
        JSON.stringify({
          "@context": "https://schema.org",
          "@type": isFirstPage ? "ImageGallery" : "CollectionPage",
          "name": pageTitle,
          "description": pageDescription,
          "url": Astro.url.toString(),
          "numberOfImages": totalPhotos,
          "image": photos.slice(0, 3).map((photo: PhotoMetadata) => ({
            "@type": "ImageObject",
            "url": photo.coverImage.src,
            "description": photo.coverImage.alt,
            "name": photo.title
          }))
        })
      }
    </script>
  </head>
  
  <body>
    <main class="photo-gallery-page">
      {!isFirstPage && (
        <nav class="page-nav">
          <a href="/photos" class="nav-link">← Gallery Home</a>
        </nav>
      )}
      
      <header class="page-header">
        <h1 class="page-title">
          {isFirstPage ? 'Photo Gallery' : `Photo Gallery - Page ${page.currentPage}`}
        </h1>
        <p class="page-description">
          {isFirstPage 
            ? `${totalPhotos} photograph${totalPhotos !== 1 ? 's' : ''} ${dateRange ? `from ${dateRange}` : ''}`
            : `Page ${page.currentPage} of ${page.lastPage} • ${totalPhotos} total photos`
          }
        </p>
        
        {photos.length > 0 && photosWithLocation.length > 0 && (
          <div class="gallery-stats">
            <span class="location-count">
              {photosWithLocation.length} with locations{!isFirstPage ? ' on this page' : ''}
            </span>
          </div>
        )}
      </header>
      
      {photos.length === 0 ? (
        <div class="empty-gallery">
          <h2>No photos yet</h2>
          <p>
            Add photos to your <code>src/content/photos</code> directory and generate metadata 
            using the CLI tool to get started.
          </p>
          <pre><code>npx astro-photo-stream --generate-config
npx astro-photo-stream</code></pre>
        </div>
      ) : (
        <>
          <!-- Location Map (if enabled and photos have location data) -->
          {config.gallery.enableMap && photosWithLocation.length > 0 && (
            <section class="map-section">
              <h2 class="section-title">
                {isFirstPage ? 'Photo Locations' : `Photo Locations (Page ${page.currentPage})`}
              </h2>
              <MultiMarkerMap 
                photos={photosWithLocation}
                height="400px"
                zoom={2}
                class="photo-locations-map"
              />
            </section>
          )}
          
          <!-- Photo Grid -->
          <section class="photos-section">
            <PhotoStream 
              photos={photos}
              itemsPerPage={config.gallery.itemsPerPage}
              showPagination={false}
              showMap={false}
              class="main-photo-stream"
            />
          </section>
          
          <!-- Astro's Built-in Pagination -->
          {page.lastPage > 1 && (
            <nav class="pagination" aria-label="Photo gallery pagination">
              <div class="pagination-info">
                Showing {page.start + 1}–{page.end + 1} of {page.total} photos
              </div>
              
              <div class="pagination-controls">
                {page.url.prev && (
                  <a 
                    href={page.url.prev} 
                    class="pagination-link previous"
                    aria-label="Previous page"
                  >
                    ← Previous
                  </a>
                )}
                
                <div class="page-numbers">
                  {/* First page */}
                  {page.currentPage > 3 && (
                    <>
                      <a href="/photos" class="page-number" aria-label="Page 1">1</a>
                      {page.currentPage > 4 && <span class="ellipsis">…</span>}
                    </>
                  )}
                  
                  {/* Current page range */}
                  {Array.from({ length: Math.min(5, page.lastPage) }, (_, i) => {
                    const pageNum = Math.max(1, Math.min(page.lastPage - 4, page.currentPage - 2)) + i;
                    if (pageNum <= page.lastPage) {
                      return pageNum === page.currentPage ? (
                        <span class="page-number current" aria-current="page">
                          {pageNum}
                        </span>
                      ) : (
                        <a 
                          href={pageNum === 1 ? '/photos' : `/photos/${pageNum}`}
                          class="page-number"
                          aria-label={`Page ${pageNum}`}
                        >
                          {pageNum}
                        </a>
                      );
                    }
                  })}
                  
                  {/* Last page */}
                  {page.currentPage < page.lastPage - 2 && (
                    <>
                      {page.currentPage < page.lastPage - 3 && <span class="ellipsis">…</span>}
                      <a 
                        href={`/photos/${page.lastPage}`} 
                        class="page-number"
                        aria-label={`Page ${page.lastPage}`}
                      >
                        {page.lastPage}
                      </a>
                    </>
                  )}
                </div>
                
                {page.url.next && (
                  <a 
                    href={page.url.next} 
                    class="pagination-link next"
                    aria-label="Next page"
                  >
                    Next →
                  </a>
                )}
              </div>
            </nav>
          )}
          
          <!-- Tags Cloud (if enabled and first page) -->
          {isFirstPage && config.gallery.enableTags && (
            <aside class="tags-section">
              <h2 class="section-title">Explore by Tags</h2>
              <div class="tags-cloud">
                {Array.from(new Set(photos.flatMap((photo: PhotoMetadata) => photo.tags))).slice(0, 20).map(tag => (
                  <a 
                    href={`/photos/tags/${tag}`} 
                    class="tag-link"
                    data-tag={tag}
                  >
                    #{tag}
                  </a>
                ))}
              </div>
            </aside>
          )}
        </>
      )}
    </main>
    
    <style>
      /* Photo gallery styling */
      .photo-gallery-page {
        max-width: 1200px;
        margin: 0 auto;
        padding: 2rem 1rem;
      }
      
      .page-nav {
        margin-bottom: 1rem;
      }
      
      .nav-link {
        display: inline-flex;
        align-items: center;
        color: #6b7280;
        text-decoration: none;
        font-weight: 500;
        transition: color 0.2s;
      }
      
      .nav-link:hover {
        color: #374151;
      }
      
      .page-header {
        text-align: center;
        margin-bottom: 3rem;
      }
      
      .page-title {
        font-size: 2.5rem;
        font-weight: 700;
        margin-bottom: 1rem;
        color: #1f2937;
      }
      
      .page-description {
        font-size: 1.125rem;
        color: #6b7280;
        margin-bottom: 1rem;
        max-width: 600px;
        margin-left: auto;
        margin-right: auto;
      }
      
      .gallery-stats {
        font-size: 0.875rem;
        color: #9ca3af;
        margin-top: 1rem;
      }
      
      .empty-gallery {
        text-align: center;
        padding: 4rem 1rem;
        background: #f9fafb;
        border-radius: 0.5rem;
        margin: 2rem 0;
      }
      
      .empty-gallery h2 {
        font-size: 1.5rem;
        color: #374151;
        margin-bottom: 1rem;
      }
      
      .empty-gallery p {
        color: #6b7280;
        margin-bottom: 1.5rem;
        max-width: 500px;
        margin-left: auto;
        margin-right: auto;
      }
      
      .empty-gallery pre {
        background: #1f2937;
        color: #f3f4f6;
        padding: 1rem;
        border-radius: 0.375rem;
        display: inline-block;
        text-align: left;
        font-size: 0.875rem;
      }
      
      .section-title {
        font-size: 1.5rem;
        font-weight: 600;
        margin-bottom: 1.5rem;
        color: #1f2937;
      }
      
      .map-section, .photos-section, .tags-section {
        margin-bottom: 3rem;
      }
      
      .pagination {
        margin-top: 3rem;
        padding-top: 2rem;
        border-top: 1px solid #e5e7eb;
      }
      
      .pagination-info {
        text-align: center;
        font-size: 0.875rem;
        color: #6b7280;
        margin-bottom: 2rem;
      }
      
      .pagination-controls {
        display: flex;
        justify-content: space-between;
        align-items: center;
        gap: 1rem;
      }
      
      .pagination-link {
        display: inline-block;
        padding: 0.75rem 1rem;
        background: #f3f4f6;
        color: #374151;
        text-decoration: none;
        border-radius: 0.375rem;
        font-weight: 500;
        transition: all 0.2s;
        min-width: 100px;
        text-align: center;
      }
      
      .pagination-link:hover {
        background: #e5e7eb;
        color: #1f2937;
      }
      
      .page-numbers {
        display: flex;
        gap: 0.5rem;
        align-items: center;
      }
      
      .page-number {
        display: inline-block;
        padding: 0.5rem 0.75rem;
        min-width: 2.5rem;
        text-align: center;
        text-decoration: none;
        border-radius: 0.375rem;
        font-weight: 500;
        transition: all 0.2s;
      }
      
      .page-number:not(.current) {
        color: #6b7280;
        background: #f9fafb;
      }
      
      .page-number:not(.current):hover {
        color: #374151;
        background: #f3f4f6;
      }
      
      .page-number.current {
        background: #3b82f6;
        color: white;
        cursor: default;
      }
      
      .ellipsis {
        color: #9ca3af;
        padding: 0 0.25rem;
      }
      
      .tags-cloud {
        display: flex;
        flex-wrap: wrap;
        gap: 0.75rem;
        justify-content: center;
      }
      
      .tag-link {
        display: inline-block;
        padding: 0.5rem 1rem;
        background: #f3f4f6;
        color: #374151;
        text-decoration: none;
        border-radius: 9999px;
        font-size: 0.875rem;
        font-weight: 500;
        transition: all 0.2s;
      }
      
      .tag-link:hover {
        background: #e5e7eb;
        color: #1f2937;
      }
      
      /* Responsive design */
      @media (max-width: 768px) {
        .photo-gallery-page {
          padding: 1rem;
        }
        
        .page-title {
          font-size: 2rem;
        }
        
        .page-description {
          font-size: 1rem;
        }
        
        .pagination-controls {
          flex-direction: column;
          gap: 1.5rem;
        }
        
        .pagination-link {
          min-width: auto;
          width: 100%;
        }
        
        .page-numbers {
          order: -1;
        }
        
        .tags-cloud {
          justify-content: flex-start;
        }
      }
      
      @media (max-width: 480px) {
        .page-numbers {
          flex-wrap: wrap;
          justify-content: center;
        }
        
        .page-number {
          min-width: 2rem;
          padding: 0.5rem;
        }
      }
    </style>
  </body>
</html>