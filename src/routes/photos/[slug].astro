---
/**
 * Individual photo page - follows Astro conventions
 * Handles URLs: /photos/2018-03-10_elasticon-0001, etc.
 * Based on reference implementation patterns with enhanced navigation
 */
import { getCollection, getEntry } from 'astro:content';
import { getConfig } from 'virtual:astro-photo-stream/config';
import PhotoCard from '../../components/PhotoCard.astro';
import MapImage from '../../components/MapImage.astro';
import type { PhotoMetadata } from '../../types.js';
import type { GetStaticPaths } from 'astro';

// Get configuration
const config = getConfig();

export const getStaticPaths: GetStaticPaths = async () => {
  // Get all photos for static generation
  const allPhotos = await getCollection('photos', ({ data }) => !data.draft);
  
  // Sort photos by publish date for navigation context
  const sortedPhotos = allPhotos
    .sort((a, b) => new Date(b.data.publishDate).getTime() - new Date(a.data.publishDate).getTime());

  return sortedPhotos.map((photo, index) => {
    // Calculate previous/next photos for navigation
    const prevPhoto = sortedPhotos[index - 1] || null;
    const nextPhoto = sortedPhotos[index + 1] || null;
    
    return {
      params: { slug: photo.slug },
      props: { 
        photo,
        prevPhoto: prevPhoto ? {
          slug: prevPhoto.slug,
          title: prevPhoto.data.title,
          coverImage: prevPhoto.data.coverImage
        } : null,
        nextPhoto: nextPhoto ? {
          slug: nextPhoto.slug,
          title: nextPhoto.data.title,
          coverImage: nextPhoto.data.coverImage
        } : null,
        photoIndex: index + 1,
        totalPhotos: sortedPhotos.length
      }
    };
  });
};

// Get props from static generation
const { photo, prevPhoto, nextPhoto, photoIndex, totalPhotos } = Astro.props;

// Convert to PhotoMetadata format
const photoData: PhotoMetadata = {
  id: photo.slug,
  title: photo.data.title,
  description: photo.data.description,
  coverImage: photo.data.coverImage,
  camera: photo.data.camera,
  lens: photo.data.lens,
  settings: photo.data.settings,
  location: photo.data.location,
  tags: photo.data.tags,
  publishDate: new Date(photo.data.publishDate),
  draft: photo.data.draft || false
};

// Get related photos (same tags, excluding current)
const allPhotos = await getCollection('photos', ({ data }) => !data.draft);
const relatedPhotos = allPhotos
  .filter(p => 
    p.slug !== photo.slug && 
    p.data.tags.some(tag => photoData.tags.includes(tag))
  )
  .sort((a, b) => new Date(b.data.publishDate).getTime() - new Date(a.data.publishDate).getTime())
  .slice(0, 4)
  .map(p => ({
    id: p.slug,
    title: p.data.title,
    description: p.data.description,
    coverImage: p.data.coverImage,
    camera: p.data.camera,
    lens: p.data.lens,
    settings: p.data.settings,
    location: p.data.location,
    tags: p.data.tags,
    publishDate: new Date(p.data.publishDate),
    draft: p.data.draft || false
  }));

// Page metadata
const title = `${photoData.title} - ${config.seo.siteName || 'Photo Gallery'}`;
const description = photoData.description || `Photo: ${photoData.title}`;
const ogImageUrl = config.seo.generateOpenGraph ? `/api/og/photo/${photo.slug}.png` : undefined;

// Format publish date
const publishDate = photoData.publishDate.toLocaleDateString('en-US', {
  year: 'numeric',
  month: 'long',
  day: 'numeric'
});

// Camera settings display
const cameraSettings = [];
if (photoData.settings?.aperture) cameraSettings.push(photoData.settings.aperture);
if (photoData.settings?.shutter) cameraSettings.push(photoData.settings.shutter);
if (photoData.settings?.iso) cameraSettings.push(`ISO ${photoData.settings.iso}`);
if (photoData.settings?.focalLength) cameraSettings.push(photoData.settings.focalLength);
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    <meta name="description" content={description} />
    
    <!-- Open Graph -->
    <meta property="og:title" content={photoData.title} />
    <meta property="og:description" content={description} />
    <meta property="og:type" content="article" />
    <meta property="og:url" content={Astro.url} />
    {ogImageUrl && <meta property="og:image" content={new URL(ogImageUrl, Astro.url)} />}
    {config.seo.siteName && <meta property="og:site_name" content={config.seo.siteName} />}
    <meta property="article:published_time" content={photoData.publishDate.toISOString()} />
    {photoData.tags.map(tag => <meta property="article:tag" content={tag} />)}
    
    <!-- Twitter -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content={photoData.title} />
    <meta name="twitter:description" content={description} />
    {ogImageUrl && <meta name="twitter:image" content={new URL(ogImageUrl, Astro.url)} />}
    {config.seo.twitterHandle && <meta name="twitter:creator" content={config.seo.twitterHandle} />}
    
    <!-- Canonical URL -->
    <link rel="canonical" href={Astro.url} />
    
    <!-- Navigation hints for preloading -->
    {prevPhoto && <link rel="prefetch" href={`/photos/${prevPhoto.slug}`} />}
    {nextPhoto && <link rel="prefetch" href={`/photos/${nextPhoto.slug}`} />}
    
    <!-- JSON-LD structured data -->
    <script type="application/ld+json">
      {
        JSON.stringify({
          "@context": "https://schema.org",
          "@type": "Photograph",
          "name": photoData.title,
          "description": description,
          "url": Astro.url.toString(),
          "image": {
            "@type": "ImageObject",
            "url": photoData.coverImage.src,
            "description": photoData.coverImage.alt
          },
          "datePublished": photoData.publishDate.toISOString(),
          "keywords": photoData.tags.join(", "),
          ...(photoData.camera && { "exifData": {
            "@type": "PropertyValue",
            "name": "Camera",
            "value": photoData.camera
          }}),
          ...(photoData.location && {
            "contentLocation": {
              "@type": "Place",
              "name": photoData.location.name,
              "geo": {
                "@type": "GeoCoordinates",
                "latitude": photoData.location.latitude,
                "longitude": photoData.location.longitude
              }
            }
          })
        })
      }
    </script>
  </head>
  
  <body>
    <main class="photo-page">
      <!-- Navigation Header -->
      <nav class="photo-nav">
        <div class="nav-left">
          <a href="/photos" class="back-link">← Back to Gallery</a>
        </div>
        <div class="nav-center">
          <span class="photo-counter">{photoIndex} of {totalPhotos}</span>
        </div>
        <div class="nav-right">
          {/* Photo Navigation */}
          <div class="photo-navigation">
            {prevPhoto ? (
              <a href={`/photos/${prevPhoto.slug}`} class="nav-photo prev" aria-label="Previous photo">
                <span class="nav-label">← Previous</span>
                <span class="nav-title">{prevPhoto.title}</span>
              </a>
            ) : (
              <div class="nav-photo disabled">
                <span class="nav-label">← Previous</span>
              </div>
            )}
            
            {nextPhoto ? (
              <a href={`/photos/${nextPhoto.slug}`} class="nav-photo next" aria-label="Next photo">
                <span class="nav-label">Next →</span>
                <span class="nav-title">{nextPhoto.title}</span>
              </a>
            ) : (
              <div class="nav-photo disabled">
                <span class="nav-label">Next →</span>
              </div>
            )}
          </div>
        </div>
      </nav>
      
      <!-- Photo Display -->
      <article class="photo-article">
        <header class="photo-header">
          <h1 class="photo-title">{photoData.title}</h1>
          {photoData.description && (
            <p class="photo-description">{photoData.description}</p>
          )}
          <time class="photo-date" datetime={photoData.publishDate.toISOString()}>
            {publishDate}
          </time>
        </header>
        
        <!-- Main Photo -->
        <div class="photo-display">
          <PhotoCard 
            photo={photoData}
            loading="eager"
            sizes="(max-width: 768px) 100vw, (max-width: 1200px) 80vw, 1200px"
            class="hero-photo"
          />
        </div>
        
        <!-- Photo Content -->
        <div class="photo-content">
          <div set:html={photo.body} />
        </div>
        
        <!-- Metadata Section -->
        <aside class="photo-metadata">
          <h2 class="metadata-title">Photo Details</h2>
          
          <dl class="metadata-list">
            <!-- Camera Information -->
            {photoData.camera && (
              <div class="metadata-item">
                <dt>Camera</dt>
                <dd>{photoData.camera}</dd>
              </div>
            )}
            
            {photoData.lens && (
              <div class="metadata-item">
                <dt>Lens</dt>
                <dd>{photoData.lens}</dd>
              </div>
            )}
            
            {cameraSettings.length > 0 && (
              <div class="metadata-item">
                <dt>Settings</dt>
                <dd>{cameraSettings.join(' • ')}</dd>
              </div>
            )}
            
            <!-- Location Information -->
            {photoData.location?.name && (
              <div class="metadata-item">
                <dt>Location</dt>
                <dd>
                  {photoData.location.name}
                  {photoData.location.latitude && photoData.location.longitude && (
                    <span class="coordinates">
                      ({photoData.location.latitude.toFixed(4)}, {photoData.location.longitude.toFixed(4)})
                    </span>
                  )}
                </dd>
              </div>
            )}
            
            <!-- Tags -->
            {photoData.tags.length > 0 && (
              <div class="metadata-item">
                <dt>Tags</dt>
                <dd class="tags-list">
                  {photoData.tags.map(tag => (
                    <a href={`/photos/tags/${tag}`} class="tag-link">#{tag}</a>
                  ))}
                </dd>
              </div>
            )}
          </dl>
        </aside>
        
        <!-- Location Map -->
        {photoData.location?.latitude && photoData.location?.longitude && (
          <section class="location-section">
            <h2 class="section-title">Where this photo was taken</h2>
            <MapImage 
              photo={photoData}
              width="100%"
              height="300px"
              zoom={12}
              class="photo-location-map"
            />
          </section>
        )}
        
        <!-- Related Photos -->
        {relatedPhotos.length > 0 && (
          <section class="related-photos">
            <h2 class="section-title">Related Photos</h2>
            <div class="related-grid">
              {relatedPhotos.map(relatedPhoto => (
                <a href={`/photos/${relatedPhoto.id}`} class="related-photo-link">
                  <PhotoCard 
                    photo={relatedPhoto}
                    loading="lazy"
                    sizes="(max-width: 768px) 50vw, 25vw"
                    class="related-photo"
                  />
                </a>
              ))}
            </div>
          </section>
        )}
      </article>
      
      <!-- Keyboard Navigation Handler -->
      <script>
        document.addEventListener('keydown', (e) => {
          if (e.target && (e.target as HTMLElement).tagName === 'INPUT') return;
          
          const prevLink = document.querySelector('.nav-photo.prev') as HTMLAnchorElement;
          const nextLink = document.querySelector('.nav-photo.next') as HTMLAnchorElement;
          
          if (e.key === 'ArrowLeft' && prevLink) {
            prevLink.click();
          } else if (e.key === 'ArrowRight' && nextLink) {
            nextLink.click();
          } else if (e.key === 'Escape') {
            window.location.href = '/photos';
          }
        });
      </script>
    </main>
    
    <style>
      /* Photo page styling with enhanced navigation */
      .photo-page {
        max-width: 1200px;
        margin: 0 auto;
        padding: 1rem;
      }
      
      .photo-nav {
        display: grid;
        grid-template-columns: 1fr auto 1fr;
        align-items: center;
        gap: 1rem;
        margin-bottom: 2rem;
        padding-bottom: 1rem;
        border-bottom: 1px solid #e5e7eb;
      }
      
      .nav-left {
        justify-self: start;
      }
      
      .nav-center {
        justify-self: center;
      }
      
      .nav-right {
        justify-self: end;
      }
      
      .back-link {
        display: inline-flex;
        align-items: center;
        color: #6b7280;
        text-decoration: none;
        font-weight: 500;
        transition: color 0.2s;
      }
      
      .back-link:hover {
        color: #374151;
      }
      
      .photo-counter {
        font-size: 0.875rem;
        color: #6b7280;
        font-weight: 500;
      }
      
      .photo-navigation {
        display: flex;
        gap: 2rem;
      }
      
      .nav-photo {
        display: flex;
        flex-direction: column;
        align-items: center;
        text-decoration: none;
        font-size: 0.875rem;
        transition: all 0.2s;
      }
      
      .nav-photo:not(.disabled) {
        color: #6b7280;
      }
      
      .nav-photo:not(.disabled):hover {
        color: #374151;
      }
      
      .nav-photo.disabled {
        color: #d1d5db;
        cursor: not-allowed;
      }
      
      .nav-label {
        font-weight: 500;
        margin-bottom: 0.25rem;
      }
      
      .nav-title {
        font-size: 0.75rem;
        max-width: 120px;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
      }
      
      .photo-article {
        display: grid;
        gap: 3rem;
      }
      
      .photo-header {
        text-align: center;
      }
      
      .photo-title {
        font-size: 2.25rem;
        font-weight: 700;
        margin-bottom: 1rem;
        color: #1f2937;
        line-height: 1.1;
      }
      
      .photo-description {
        font-size: 1.125rem;
        color: #6b7280;
        margin-bottom: 1rem;
        max-width: 600px;
        margin-left: auto;
        margin-right: auto;
      }
      
      .photo-date {
        display: inline-block;
        color: #9ca3af;
        font-size: 0.875rem;
        font-weight: 500;
      }
      
      .photo-display {
        display: flex;
        justify-content: center;
      }
      
      .photo-content {
        max-width: 65ch;
        margin: 0 auto;
        line-height: 1.7;
        color: #374151;
      }
      
      .photo-content :global(p) {
        margin-bottom: 1.5rem;
      }
      
      .photo-metadata {
        background: #f9fafb;
        border-radius: 0.5rem;
        padding: 2rem;
        margin: 0 auto;
        max-width: 600px;
      }
      
      .metadata-title {
        font-size: 1.25rem;
        font-weight: 600;
        margin-bottom: 1.5rem;
        color: #1f2937;
      }
      
      .metadata-list {
        display: grid;
        gap: 1rem;
      }
      
      .metadata-item {
        display: grid;
        grid-template-columns: 1fr 2fr;
        gap: 1rem;
        padding-bottom: 1rem;
        border-bottom: 1px solid #e5e7eb;
      }
      
      .metadata-item:last-child {
        border-bottom: none;
        padding-bottom: 0;
      }
      
      .metadata-item dt {
        font-weight: 600;
        color: #374151;
        font-size: 0.875rem;
        text-transform: uppercase;
        letter-spacing: 0.05em;
      }
      
      .metadata-item dd {
        color: #6b7280;
        margin: 0;
      }
      
      .coordinates {
        display: block;
        font-size: 0.75rem;
        color: #9ca3af;
        margin-top: 0.25rem;
      }
      
      .tags-list {
        display: flex;
        flex-wrap: wrap;
        gap: 0.5rem;
      }
      
      .tag-link {
        display: inline-block;
        padding: 0.25rem 0.75rem;
        background: #e5e7eb;
        color: #374151;
        text-decoration: none;
        border-radius: 9999px;
        font-size: 0.75rem;
        font-weight: 500;
        transition: all 0.2s;
      }
      
      .tag-link:hover {
        background: #d1d5db;
        color: #1f2937;
      }
      
      .section-title {
        font-size: 1.5rem;
        font-weight: 600;
        margin-bottom: 1.5rem;
        color: #1f2937;
      }
      
      .location-section {
        margin: 3rem 0;
      }
      
      .related-photos {
        margin-top: 3rem;
        padding-top: 3rem;
        border-top: 1px solid #e5e7eb;
      }
      
      .related-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 1.5rem;
      }
      
      .related-photo-link {
        display: block;
        text-decoration: none;
        transition: transform 0.2s;
      }
      
      .related-photo-link:hover {
        transform: translateY(-2px);
      }
      
      /* Responsive design */
      @media (max-width: 768px) {
        .photo-nav {
          grid-template-columns: 1fr;
          text-align: center;
          gap: 0.5rem;
        }
        
        .nav-center {
          order: -1;
        }
        
        .photo-navigation {
          gap: 1rem;
          justify-content: center;
        }
        
        .photo-title {
          font-size: 1.75rem;
        }
        
        .photo-description {
          font-size: 1rem;
        }
        
        .photo-metadata {
          padding: 1.5rem;
        }
        
        .metadata-item {
          grid-template-columns: 1fr;
          gap: 0.5rem;
        }
        
        .related-grid {
          grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
          gap: 1rem;
        }
      }
    </style>
  </body>
</html>