---
/**
 * Tag-based photo filtering with pagination - consolidated using shared utilities
 * Handles URLs: /photos/tags/landscape, /photos/tags/landscape/2, etc.
 */
import { config } from 'virtual:astro-photostream/config';
import { generateTagPaths } from '../../../../utils/pagination.js';
import { getPhotosCollection, filterPhotosByTag, sortPhotosByDate, convertToPhotoMetadata, getRelatedTags } from '../../../../utils/photo-data.js';
import { generateTagPageSeo } from '../../../../utils/seo.js';
import SeoHead from '../../../../components/SeoHead.astro';
import TagPageContent from '../../../../components/TagPageContent.astro';
import type { GetStaticPaths } from 'astro';

export const getStaticPaths: GetStaticPaths = async ({ paginate }) => {
  const allPhotos = await getPhotosCollection();
  const allTags = await generateTagPaths();
  const paths = [];

  for (const tag of allTags) {
    const taggedPhotos = filterPhotosByTag(allPhotos, tag);
    const sortedPhotos = sortPhotosByDate(taggedPhotos);
    const photos = sortedPhotos.map(convertToPhotoMetadata);

    if (photos.length === 0) continue;

    const relatedTags = getRelatedTags(photos, tag).slice(0, 10);

    const tagPaths = paginate(photos, {
      params: { tag },
      pageSize: config.gallery.itemsPerPage,
      props: {
        tag,
        totalPhotos: photos.length,
        relatedTags,
        config
      }
    });

    paths.push(...tagPaths);
  }

  return paths;
};

// Get paginated data
const { page, tag, totalPhotos, relatedTags, config } = Astro.props;
const photos = page.data;

// Generate SEO metadata
const seoData = generateTagPageSeo(
  tag,
  page.currentPage,
  page.lastPage,
  totalPhotos,
  config.seo,
  Astro.url
);
---

<html lang="en">
  <head>
    <SeoHead
      title={seoData.title}
      description={seoData.description}
      canonical={seoData.canonical}
      ogImageUrl={seoData.ogImageUrl}
      jsonLd={seoData.jsonLd}
      siteName={config.seo.siteName}
    />
    
    <!-- Pagination SEO -->
    {page.url.prev && <link rel="prev" href={page.url.prev} />}
    {page.url.next && <link rel="next" href={page.url.next} />}
    {page.currentPage > 1 && <meta name="robots" content="noindex" />}
  </head>

  <body>
    <TagPageContent
      photos={photos}
      page={page}
      tag={tag}
      totalPhotos={totalPhotos}
      relatedTags={relatedTags}
      config={config}
    />

  </body>
</html>
