---
/**
 * Content-only tag-based photo filtering with pagination - for use with layout wrappers
 * Handles URLs: /photos/tags/landscape, /photos/tags/landscape/2, etc.
 * Based on main tag route but extracting only content portion
 */
import { getCollection } from 'astro:content';
import { config } from 'virtual:astro-photostream/config';
import { layoutConfig, shouldUseLayout, layoutWrapper, layoutProps } from 'virtual:astro-photostream/layout';
import PhotoStream from '../../../../components/PhotoStream.astro';
import MultiMarkerMap from '../../../../components/MultiMarkerMap.astro';
import type { PhotoMetadata } from '../../../../types.js';
import type { GetStaticPaths, Page } from 'astro';

export const getStaticPaths: GetStaticPaths = async ({ paginate }) => {
  // Get all photos from content collection
  const allPhotos = await getCollection('photos', ({ data }) => {
    return !data.draft;
  });

  // Get all unique tags
  const allTags = new Set<string>();
  allPhotos.forEach(photo => {
    photo.data.tags.forEach(tag => allTags.add(tag));
  });

  // Create paginated paths for each tag
  const paths = [];
  
  for (const tag of allTags) {
    // Filter photos by this tag
    const taggedPhotos = allPhotos
      .filter(photo => photo.data.tags.includes(tag))
      .sort((a, b) => new Date(b.data.publishDate).getTime() - new Date(a.data.publishDate).getTime());

    // Convert to PhotoMetadata format
    const photos: PhotoMetadata[] = taggedPhotos.map(photo => ({
      id: photo.slug,
      title: photo.data.title,
      description: photo.data.description,
      coverImage: photo.data.coverImage,
      camera: photo.data.camera,
      lens: photo.data.lens,
      settings: photo.data.settings,
      location: photo.data.location,
      tags: photo.data.tags,
      publishDate: new Date(photo.data.publishDate),
      draft: photo.data.draft || false
    }));

    // Get related tags (tags that appear with this tag)
    const relatedTags = new Set<string>();
    taggedPhotos.forEach(photo => {
      photo.data.tags.forEach(otherTag => {
        if (otherTag !== tag) {
          relatedTags.add(otherTag);
        }
      });
    });

    // Paginate photos for this tag
    const paginatedPaths = paginate(photos, {
      params: { tag },
      pageSize: config.gallery.itemsPerPage,
      props: {
        tag,
        totalPhotos: photos.length,
        relatedTags: Array.from(relatedTags).slice(0, 10), // Limit related tags
        config,
        layoutConfig,
        layoutWrapper,
        layoutProps
      }
    });

    paths.push(...paginatedPaths);
  }

  return paths;
};

// Get paginated data
const { 
  page, 
  tag, 
  totalPhotos, 
  relatedTags, 
  layoutConfig: passedLayoutConfig, 
  layoutWrapper: passedLayoutWrapper, 
  layoutProps: passedLayoutProps 
} = Astro.props as { 
  page: Page<PhotoMetadata>, 
  tag: string, 
  totalPhotos: number, 
  relatedTags: string[],
  layoutConfig: any,
  layoutWrapper: string | null,
  layoutProps: any
};
const photos = page.data;

// Get photos with location data for map
const photosWithLocation = photos.filter((photo: PhotoMetadata) => 
  photo.location?.latitude && photo.location?.longitude
);

// Calculate date range for this page
const dates = photos.map((p: PhotoMetadata) => p.publishDate).sort((a: Date, b: Date) => b.getTime() - a.getTime());
const newestDate = dates[0];
const oldestDate = dates[dates.length - 1];
const dateRange = newestDate && oldestDate && newestDate !== oldestDate
  ? `${oldestDate.getFullYear()} - ${newestDate.getFullYear()}`
  : newestDate?.getFullYear().toString() || '';

// Page metadata
const isFirstPage = page.currentPage === 1;
const capitalizedTag = tag.charAt(0).toUpperCase() + tag.slice(1);
const pageTitle = isFirstPage 
  ? `"${capitalizedTag}" Photos - ${config.seo.siteName || 'Photo Stream'}`
  : `"${capitalizedTag}" Photos - Page ${page.currentPage} - ${config.seo.siteName || 'Photo Stream'}`;

const pageDescription = isFirstPage
  ? `Browse ${totalPhotos} photograph${totalPhotos !== 1 ? 's' : ''} tagged with "${tag}". ${dateRange ? `Photos from ${dateRange}.` : ''}`
  : `"${capitalizedTag}" photos - page ${page.currentPage} of ${page.lastPage}. ${dateRange ? `Photos from ${dateRange} on this page.` : ''}`;

// Prepare props for layout wrapper
const layoutWrapperProps = {
  title: pageTitle,
  description: pageDescription,
  ...passedLayoutProps
};

// Try to load layout wrapper if provided (path is already resolved by integration)
let LayoutComponent = null;
if (passedLayoutWrapper) {
  try {
    // Use /* @vite-ignore */ to suppress Vite analysis warning  
    const layoutModule = await import(/* @vite-ignore */ passedLayoutWrapper);
    LayoutComponent = layoutModule.default || layoutModule;
  } catch (error) {
    console.warn(`[astro-photostream] Failed to load layout component: ${passedLayoutWrapper}`, error);
    LayoutComponent = null;
  }
}
---

{LayoutComponent ? (
  <LayoutComponent {...layoutWrapperProps}>
    <main class="tag-photos-page">
      <!-- Navigation Header -->
      <nav class="page-nav">
        <a href="/photos" class="nav-link">← All Photos</a>
      </nav>
      
      <header class="page-header">
        <h1 class="page-title">
          <span class="tag-label">#{tag}</span>
          {!isFirstPage && <span class="page-info">- Page {page.currentPage}</span>}
        </h1>
        <p class="page-description">
          {isFirstPage 
            ? `${totalPhotos} photograph${totalPhotos !== 1 ? 's' : ''} ${dateRange ? `from ${dateRange}` : ''}`
            : `Page ${page.currentPage} of ${page.lastPage} • ${totalPhotos} total photos`
          }
        </p>
      </header>

      <!-- Related Tags -->
      {relatedTags.length > 0 && (
        <section class="related-tags-section">
          <h2 class="section-title">Related Tags</h2>
          <div class="tag-cloud">
            {relatedTags.map(relatedTag => (
              <a href={`/photos/tags/${relatedTag}`} class="tag-link">
                #{relatedTag}
              </a>
            ))}
          </div>
        </section>
      )}

      <!-- Map Section -->
      {photos.length > 0 && photosWithLocation.length > 0 && config.gallery.enableMap && (
        <section class="map-section">
          <h2 class="section-title">Photo Locations</h2>
          <div class="map-container">
            <MultiMarkerMap 
              photos={photosWithLocation} 
              height="400px" 
            />
          </div>
          {photosWithLocation.length < photos.length && (
            <p class="map-note">
              Showing {photosWithLocation.length} of {photos.length} photos with location data
            </p>
          )}
        </section>
      )}

      <!-- Photo Gallery Section -->
      <section class="photos-section">
        <PhotoStream photos={photos} />
      </section>

      <!-- Pagination -->
      {(page.url.prev || page.url.next) && (
        <nav class="pagination" aria-label="Tag photos pagination">
          <div class="pagination-links">
            {page.url.prev ? (
              <a href={page.url.prev} class="pagination-link pagination-prev" rel="prev">
                ← Previous
              </a>
            ) : (
              <span class="pagination-link pagination-prev disabled">← Previous</span>
            )}
            
            <div class="pagination-info">
              <span class="current-page">{page.currentPage}</span>
              <span class="separator">of</span>
              <span class="total-pages">{page.lastPage}</span>
            </div>
            
            {page.url.next ? (
              <a href={page.url.next} class="pagination-link pagination-next" rel="next">
                Next →
              </a>
            ) : (
              <span class="pagination-link pagination-next disabled">Next →</span>
            )}
          </div>
        </nav>
      )}
    </main>
  </LayoutComponent>
) : (
  <!-- Minimal fallback when no layout wrapper is provided -->
  <html lang="en">
    <head>
      <meta charset="utf-8" />
      <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
      <meta name="viewport" content="width=device-width" />
      <meta name="generator" content={Astro.generator} />
      <title>{pageTitle}</title>
      <meta name="description" content={pageDescription} />
      
      <!-- Open Graph -->
      <meta property="og:title" content={pageTitle} />
      <meta property="og:description" content={pageDescription} />
      <meta property="og:type" content="website" />
    </head>
    <body>
      <main class="tag-photos-page">
        <!-- Navigation Header -->
        <nav class="page-nav">
          <a href="/photos" class="nav-link">← All Photos</a>
        </nav>
        
        <header class="page-header">
          <h1 class="page-title">
            <span class="tag-label">#{tag}</span>
            {!isFirstPage && <span class="page-info">- Page {page.currentPage}</span>}
          </h1>
          <p class="page-description">
            {isFirstPage 
              ? `${totalPhotos} photograph${totalPhotos !== 1 ? 's' : ''} ${dateRange ? `from ${dateRange}` : ''}`
              : `Page ${page.currentPage} of ${page.lastPage} • ${totalPhotos} total photos`
            }
          </p>
        </header>

        <!-- Related Tags -->
        {relatedTags.length > 0 && (
          <section class="related-tags-section">
            <h2 class="section-title">Related Tags</h2>
            <div class="tag-cloud">
              {relatedTags.map(relatedTag => (
                <a href={`/photos/tags/${relatedTag}`} class="tag-link">
                  #{relatedTag}
                </a>
              ))}
            </div>
          </section>
        )}

        <!-- Map Section -->
        {photos.length > 0 && photosWithLocation.length > 0 && config.gallery.enableMap && (
          <section class="map-section">
            <h2 class="section-title">Photo Locations</h2>
            <div class="map-container">
              <MultiMarkerMap 
                photos={photosWithLocation} 
                height="400px" 
              />
            </div>
            {photosWithLocation.length < photos.length && (
              <p class="map-note">
                Showing {photosWithLocation.length} of {photos.length} photos with location data
              </p>
            )}
          </section>
        )}

        <!-- Photo Gallery Section -->
        <section class="photos-section">
          <PhotoStream photos={photos} />
        </section>

        <!-- Pagination -->
        {(page.url.prev || page.url.next) && (
          <nav class="pagination" aria-label="Tag photos pagination">
            <div class="pagination-links">
              {page.url.prev ? (
                <a href={page.url.prev} class="pagination-link pagination-prev" rel="prev">
                  ← Previous
                </a>
              ) : (
                <span class="pagination-link pagination-prev disabled">← Previous</span>
              )}
              
              <div class="pagination-info">
                <span class="current-page">{page.currentPage}</span>
                <span class="separator">of</span>
                <span class="total-pages">{page.lastPage}</span>
              </div>
              
              {page.url.next ? (
                <a href={page.url.next} class="pagination-link pagination-next" rel="next">
                  Next →
                </a>
              ) : (
                <span class="pagination-link pagination-next disabled">Next →</span>
              )}
            </div>
          </nav>
        )}
      </main>
      
      <style>
        /* Minimal styling for fallback mode */
        .tag-photos-page {
          max-width: 1200px;
          margin: 0 auto;
          padding: 2rem 1rem;
        }
        
        .page-nav {
          margin-bottom: 2rem;
        }
        
        .nav-link {
          color: #3b82f6;
          text-decoration: none;
        }
        
        .page-header {
          text-align: center;
          margin-bottom: 2rem;
        }
        
        .page-title {
          font-size: 2rem;
          margin-bottom: 0.5rem;
          color: #1f2937;
        }
        
        .tag-label {
          background: #3b82f6;
          color: white;
          padding: 0.25rem 0.75rem;
          border-radius: 0.5rem;
          font-size: 0.9em;
        }
        
        .page-description {
          color: #6b7280;
          font-size: 1.1rem;
        }
        
        .section-title {
          font-size: 1.5rem;
          margin: 2rem 0 1rem 0;
          color: #1f2937;
        }
        
        .tag-cloud {
          display: flex;
          flex-wrap: wrap;
          gap: 0.5rem;
          margin-bottom: 2rem;
        }
        
        .tag-link {
          background: #f3f4f6;
          color: #374151;
          padding: 0.25rem 0.75rem;
          border-radius: 0.375rem;
          text-decoration: none;
          font-size: 0.9rem;
        }
        
        .tag-link:hover {
          background: #e5e7eb;
        }
        
        .pagination {
          margin-top: 3rem;
          display: flex;
          justify-content: center;
        }
        
        .pagination-links {
          display: flex;
          align-items: center;
          gap: 1rem;
        }
        
        .pagination-link {
          padding: 0.5rem 1rem;
          background: #f3f4f6;
          border-radius: 0.375rem;
          text-decoration: none;
          color: #374151;
        }
        
        .pagination-link:hover:not(.disabled) {
          background: #e5e7eb;
        }
        
        .pagination-link.disabled {
          opacity: 0.5;
        }
        
        @media (prefers-color-scheme: dark) {
          .page-title {
            color: #f9fafb;
          }
          .page-description {
            color: #9ca3af;
          }
          .section-title {
            color: #f9fafb;
          }
          .tag-link {
            background: #374151;
            color: #f9fafb;
          }
          .tag-link:hover {
            background: #4b5563;
          }
          .pagination-link {
            background: #374151;
            color: #f9fafb;
          }
          .pagination-link:hover:not(.disabled) {
            background: #4b5563;
          }
        }
      </style>
    </body>
  </html>
)}