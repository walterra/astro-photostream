---
/**
 * Paginator Component
 * Reusable pagination component based on Astro's page object
 * Based on reference implementation patterns
 */

// Import consolidated CSS
import '../styles/aps-core.css';

interface Props {
  page: {
    currentPage: number;
    lastPage: number;
    url: {
      prev?: string;
      next?: string;
    };
    start: number;
    end: number;
    total: number;
  };
  baseUrl?: string;
  itemName?: string;
  class?: string;
}

const { 
  page, 
  baseUrl = '', 
  itemName = 'items',
  class: className = ''
} = Astro.props;

// Generate page numbers to show
const generatePageNumbers = () => {
  const pages = [];
  const { currentPage, lastPage } = page;
  
  // Always show first page if we're past page 3
  if (currentPage > 3) {
    pages.push(1);
    if (currentPage > 4) {
      pages.push('ellipsis');
    }
  }
  
  // Show current page and surrounding pages
  const start = Math.max(1, currentPage - 2);
  const end = Math.min(lastPage, currentPage + 2);
  
  for (let i = start; i <= end; i++) {
    pages.push(i);
  }
  
  // Always show last page if we're not near the end
  if (currentPage < lastPage - 2) {
    if (currentPage < lastPage - 3) {
      pages.push('ellipsis');
    }
    pages.push(lastPage);
  }
  
  return pages;
};

const pageNumbers = generatePageNumbers();

// Generate URL for a page number
const getPageUrl = (pageNum: number) => {
  if (pageNum === 1) {
    return baseUrl || '/';
  }
  return `${baseUrl}/${pageNum}`;
};
---

{page.lastPage > 1 && (
  <nav class={`aps-mt-2xl aps-p-lg aps-border-t ${className}`} aria-label="Pagination navigation">
    <div class="aps-text-center aps-text-sm aps-text-secondary aps-mb-2xl">
      Showing {page.start + 1}–{page.end + 1} of {page.total} {itemName}
    </div>
    
    <div class="aps-flex aps-justify-between aps-items-center aps-gap-md aps-paginator-controls">
      <!-- Previous page link -->
      {page.url.prev ? (
        <a 
          href={page.url.prev} 
          class="aps-button"
          aria-label="Previous page"
          style="min-width: 100px;"
        >
          ← Previous
        </a>
      ) : (
        <span class="aps-button aps-text-muted" style="min-width: 100px; cursor: not-allowed;">
          ← Previous
        </span>
      )}
      
      <!-- Page numbers -->
      <div class="aps-flex aps-gap-sm aps-items-center aps-paginator-numbers">
        {pageNumbers.map(pageNum => {
          if (pageNum === 'ellipsis') {
            return <span class="aps-text-muted aps-p-xs" aria-hidden="true">…</span>;
          }
          
          const pageNumber = pageNum as number;
          const isCurrentPage = pageNumber === page.currentPage;
          
          return isCurrentPage ? (
            <span class="aps-page-number aps-page-number--current" aria-current="page">
              {pageNumber}
            </span>
          ) : (
            <a 
              href={getPageUrl(pageNumber)}
              class="aps-page-number"
              aria-label={`Go to page ${pageNumber}`}
            >
              {pageNumber}
            </a>
          );
        })}
      </div>
      
      <!-- Next page link -->
      {page.url.next ? (
        <a 
          href={page.url.next} 
          class="aps-button"
          aria-label="Next page"
          style="min-width: 100px;"
        >
          Next →
        </a>
      ) : (
        <span class="aps-button aps-text-muted" style="min-width: 100px; cursor: not-allowed;">
          Next →
        </span>
      )}
    </div>
  </nav>
)}

<style>
  /* Responsive behavior for mobile */
  @media (max-width: 768px) {
    .aps-paginator-controls {
      flex-direction: column;
      gap: 1.5rem;
    }
    
    .aps-paginator-controls > a,
    .aps-paginator-controls > span {
      width: 100%;
    }
    
    .aps-paginator-numbers {
      order: -1;
    }
  }
  
  @media (max-width: 480px) {
    .aps-paginator-numbers {
      flex-wrap: wrap;
      justify-content: center;
    }
  }
</style>

