---
/**
 * Paginator Component
 * Reusable pagination component based on Astro's page object
 * Based on reference implementation patterns
 */

interface Props {
  page: {
    currentPage: number;
    lastPage: number;
    url: {
      prev?: string;
      next?: string;
    };
    start: number;
    end: number;
    total: number;
  };
  baseUrl?: string;
  itemName?: string;
  class?: string;
}

const { 
  page, 
  baseUrl = '', 
  itemName = 'items',
  class: className = ''
} = Astro.props;

// Generate page numbers to show
const generatePageNumbers = () => {
  const pages = [];
  const { currentPage, lastPage } = page;
  
  // Always show first page if we're past page 3
  if (currentPage > 3) {
    pages.push(1);
    if (currentPage > 4) {
      pages.push('ellipsis');
    }
  }
  
  // Show current page and surrounding pages
  const start = Math.max(1, currentPage - 2);
  const end = Math.min(lastPage, currentPage + 2);
  
  for (let i = start; i <= end; i++) {
    pages.push(i);
  }
  
  // Always show last page if we're not near the end
  if (currentPage < lastPage - 2) {
    if (currentPage < lastPage - 3) {
      pages.push('ellipsis');
    }
    pages.push(lastPage);
  }
  
  return pages;
};

const pageNumbers = generatePageNumbers();

// Generate URL for a page number
const getPageUrl = (pageNum: number) => {
  if (pageNum === 1) {
    return baseUrl || '/';
  }
  return `${baseUrl}/${pageNum}`;
};
---

{page.lastPage > 1 && (
  <nav class={`paginator ${className}`} aria-label="Pagination navigation">
    <div class="pagination-info">
      Showing {page.start + 1}–{page.end + 1} of {page.total} {itemName}
    </div>
    
    <div class="pagination-controls">
      <!-- Previous page link -->
      {page.url.prev ? (
        <a 
          href={page.url.prev} 
          class="pagination-link previous"
          aria-label="Previous page"
        >
          ← Previous
        </a>
      ) : (
        <span class="pagination-link disabled">
          ← Previous
        </span>
      )}
      
      <!-- Page numbers -->
      <div class="page-numbers">
        {pageNumbers.map(pageNum => {
          if (pageNum === 'ellipsis') {
            return <span class="ellipsis" aria-hidden="true">…</span>;
          }
          
          const pageNumber = pageNum as number;
          const isCurrentPage = pageNumber === page.currentPage;
          
          return isCurrentPage ? (
            <span class="page-number current" aria-current="page">
              {pageNumber}
            </span>
          ) : (
            <a 
              href={getPageUrl(pageNumber)}
              class="page-number"
              aria-label={`Go to page ${pageNumber}`}
            >
              {pageNumber}
            </a>
          );
        })}
      </div>
      
      <!-- Next page link -->
      {page.url.next ? (
        <a 
          href={page.url.next} 
          class="pagination-link next"
          aria-label="Next page"
        >
          Next →
        </a>
      ) : (
        <span class="pagination-link disabled">
          Next →
        </span>
      )}
    </div>
  </nav>
)}

<style>
  .paginator {
    margin-top: 3rem;
    padding-top: 2rem;
    border-top: 1px solid #e5e7eb;
  }
  
  .pagination-info {
    text-align: center;
    font-size: 0.875rem;
    color: #6b7280;
    margin-bottom: 2rem;
  }
  
  .pagination-controls {
    display: flex;
    justify-content: space-between;
    align-items: center;
    gap: 1rem;
  }
  
  .pagination-link {
    display: inline-block;
    padding: 0.75rem 1rem;
    background: #f3f4f6;
    color: #374151;
    text-decoration: none;
    border-radius: 0.375rem;
    font-weight: 500;
    transition: all 0.2s;
    min-width: 100px;
    text-align: center;
  }
  
  .pagination-link:not(.disabled):hover {
    background: #e5e7eb;
    color: #1f2937;
  }
  
  .pagination-link.disabled {
    color: #9ca3af;
    cursor: not-allowed;
  }
  
  .page-numbers {
    display: flex;
    gap: 0.5rem;
    align-items: center;
  }
  
  .page-number {
    display: inline-block;
    padding: 0.5rem 0.75rem;
    min-width: 2.5rem;
    text-align: center;
    text-decoration: none;
    border-radius: 0.375rem;
    font-weight: 500;
    transition: all 0.2s;
  }
  
  .page-number:not(.current) {
    color: #6b7280;
    background: #f9fafb;
  }
  
  .page-number:not(.current):hover {
    color: #374151;
    background: #f3f4f6;
  }
  
  .page-number.current {
    background: #3b82f6;
    color: white;
    cursor: default;
  }
  
  .ellipsis {
    color: #9ca3af;
    padding: 0 0.25rem;
    user-select: none;
  }
  
  /* Responsive design */
  @media (max-width: 768px) {
    .pagination-controls {
      flex-direction: column;
      gap: 1.5rem;
    }
    
    .pagination-link {
      min-width: auto;
      width: 100%;
    }
    
    .page-numbers {
      order: -1;
    }
  }
  
  @media (max-width: 480px) {
    .page-numbers {
      flex-wrap: wrap;
      justify-content: center;
    }
    
    .page-number {
      min-width: 2rem;
      padding: 0.5rem;
    }
  }
</style>