---
import type { PhotoCardProps } from '../types.js';
import { Image, getImage } from 'astro:assets';

interface Props extends PhotoCardProps {
  size?: "small" | "medium" | "large";
}

const { 
  photo, 
  size = "medium",
  loading = 'lazy',
  class: className = ''
} = Astro.props;

// Size-specific classes aligned with reference implementation
const sizeClasses = {
  small: "aspect-square w-full max-w-sm",
  medium: "aspect-[4/3] w-full", 
  large: "aspect-[3/2] w-full",
};

// Size-specific image dimensions
const imageDimensions = {
  small: { width: 300, height: 300 },
  medium: { width: 400, height: 300 },
  large: { width: 600, height: 400 }
};

const dimensions = imageDimensions[size];

// Generate cropped image for square thumbnails
const optimizedImage = photo.coverImage?.src ? await getImage({
  src: photo.coverImage.src,
  width: dimensions.width,
  height: dimensions.height,
  fit: 'cover',
  format: 'webp'
}).catch(error => {
  console.warn('Failed to optimize image:', error);
  return null;
}) : null;
---

<article class="group">
  <a href={`/photos/${photo.id}`} class="block">
    <div class={`overflow-hidden rounded-lg ${sizeClasses[size]}`}>
      {optimizedImage ? (
        <img
          src={optimizedImage.src}
          alt={photo.coverImage.alt || photo.title || `Photo ${photo.id}`}
          class="h-full w-full object-cover rounded-lg transition-transform group-hover:scale-105"
          loading={loading}
          width={optimizedImage.attributes.width}
          height={optimizedImage.attributes.height}
        />
      ) : photo.coverImage?.src ? (
        <img
          src={photo.coverImage.src}
          alt={photo.coverImage?.alt || photo.title || `Photo ${photo.id}`}
          class="h-full w-full object-cover rounded-lg transition-transform group-hover:scale-105"
          loading={loading}
          width={dimensions.width}
          height={dimensions.height}
        />
      ) : (
        <div class="h-full w-full bg-gray-200 dark:bg-gray-700 flex items-center justify-center">
          <span class="text-gray-400">No image</span>
        </div>
      )}
    </div>
    
    {photo.publishDate && (
      <div class="mt-2">
        <time class="text-xs text-gray-600 dark:text-gray-400" datetime={photo.publishDate.toISOString()}>
          {photo.publishDate.toLocaleDateString()}
        </time>
      </div>
    )}
  </a>
</article>

<!-- 
  Aligned with reference implementation:
  - Uses Tailwind classes exclusively (no custom CSS)
  - Clean card design with hover effects
  - Aspect ratio variants (square, 4:3, 3:2)
  - Minimal metadata display (just publish date)
  - Group hover pattern for image scaling
-->