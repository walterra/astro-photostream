---
/**
 * Reusable photo detail content component
 * Extracts shared content logic from photo detail route files
 */

import PhotoCard from './PhotoCard.astro';
import MapImage from './MapImage.astro';
import type { PhotoMetadata } from '../types.js';

// Import consolidated CSS
import '../styles/aps-core.css';

export interface Props {
  photo: any; // Collection entry
  photoData: PhotoMetadata;
  prevPhoto?: { slug: string; title: string; coverImage: string } | null;
  nextPhoto?: { slug: string; title: string; coverImage: string } | null;
  photoIndex: number;
  totalPhotos: number;
  relatedPhotos: PhotoMetadata[];
  config: any;
}

const { photo, photoData, prevPhoto, nextPhoto, photoIndex, totalPhotos, relatedPhotos, config } = Astro.props;

// Format publish date
const publishDate = photoData.publishDate.toLocaleDateString('en-US', {
  year: 'numeric',
  month: 'long', 
  day: 'numeric'
});

// Format camera settings
const cameraSettings = [
  photoData.settings?.aperture && `f/${photoData.settings.aperture}`,
  photoData.settings?.shutterSpeed && `${photoData.settings.shutterSpeed}s`,
  photoData.settings?.iso && `ISO ${photoData.settings.iso}`,
  photoData.settings?.focalLength && `${photoData.settings.focalLength}mm`
].filter(Boolean);
---

<main class="aps-container">
  <!-- Photo Navigation -->
  <nav class="aps-bg-primary aps-border-b aps-mb-2xl aps-p-md" style="position: sticky; top: 0; z-index: 10;" aria-label="Photo navigation">
    <div class="aps-flex aps-justify-between aps-items-center aps-gap-md aps-photo-nav-container">
      <div class="aps-flex aps-items-center aps-gap-md">
        <span class="aps-text-sm aps-text-secondary">Photo {photoIndex} of {totalPhotos}</span>
        <a href="/photos" class="aps-link aps-text-sm">← Back to Gallery</a>
      </div>
      
      <div class="aps-flex aps-gap-md">
        {prevPhoto ? (
          <a href={`/photos/${prevPhoto.slug}`} class="aps-flex aps-flex-col aps-items-center aps-text-center aps-p-sm aps-rounded-md aps-photo-nav-link prev" aria-label="Previous photo" style="min-width: 120px; text-decoration: none; transition: background-color 0.2s;">
            <span class="aps-text-xs aps-text-secondary aps-mb-xs">← Previous</span>
            <span class="aps-text-sm aps-link aps-font-medium">{prevPhoto.title}</span>
          </a>
        ) : (
          <div class="aps-flex aps-flex-col aps-items-center aps-text-center aps-p-sm aps-rounded-md" style="min-width: 120px; opacity: 0.5; cursor: not-allowed;">
            <span class="aps-text-xs aps-text-secondary">← Previous</span>
          </div>
        )}
        
        {nextPhoto ? (
          <a href={`/photos/${nextPhoto.slug}`} class="aps-flex aps-flex-col aps-items-center aps-text-center aps-p-sm aps-rounded-md aps-photo-nav-link next" aria-label="Next photo" style="min-width: 120px; text-decoration: none; transition: background-color 0.2s;">
            <span class="aps-text-xs aps-text-secondary aps-mb-xs">Next →</span>
            <span class="aps-text-sm aps-link aps-font-medium">{nextPhoto.title}</span>
          </a>
        ) : (
          <div class="aps-flex aps-flex-col aps-items-center aps-text-center aps-p-sm aps-rounded-md" style="min-width: 120px; opacity: 0.5; cursor: not-allowed;">
            <span class="aps-text-xs aps-text-secondary">Next →</span>
          </div>
        )}
      </div>
    </div>
  </nav>
  
  <!-- Photo Display -->
  <article class="aps-flex aps-flex-col aps-gap-2xl">
    <header class="aps-text-center">
      <h1 class="aps-text-3xl aps-font-bold aps-mb-md aps-text-primary">{photoData.title}</h1>
      {photoData.description && (
        <p class="aps-text-xl aps-text-secondary aps-mb-sm" style="line-height: 1.6;">{photoData.description}</p>
      )}
      <time class="aps-text-muted aps-text-sm" datetime={photoData.publishDate.toISOString()}>
        {publishDate}
      </time>
    </header>
    
    <!-- Main Photo -->
    <div class="aps-flex aps-justify-center">
      <PhotoCard 
        photo={photoData}
        loading="eager"
        sizes="(max-width: 768px) 100vw, (max-width: 1200px) 80vw, 1200px"
        class="hero-photo"
      />
    </div>
    
    <!-- Photo Content -->
    <div class="aps-text-primary" style="line-height: 1.7;">
      <div set:html={photo.body} />
    </div>
    
    <!-- Metadata Section -->
    <aside class="aps-card aps-card-body">
      <h2 class="aps-text-xl aps-font-semibold aps-mb-md aps-text-primary">Photo Details</h2>
      
      <dl class="aps-flex aps-flex-col aps-gap-md">
        <!-- Camera Information -->
        {photoData.camera && (
          <div class="aps-flex aps-flex-col aps-gap-xs">
            <dt class="aps-font-semibold aps-text-primary aps-text-sm">Camera</dt>
            <dd class="aps-text-secondary" style="margin: 0;">{photoData.camera}</dd>
          </div>
        )}
        
        {photoData.lens && (
          <div class="aps-flex aps-flex-col aps-gap-xs">
            <dt class="aps-font-semibold aps-text-primary aps-text-sm">Lens</dt>
            <dd class="aps-text-secondary" style="margin: 0;">{photoData.lens}</dd>
          </div>
        )}
        
        {cameraSettings.length > 0 && (
          <div class="aps-flex aps-flex-col aps-gap-xs">
            <dt class="aps-font-semibold aps-text-primary aps-text-sm">Settings</dt>
            <dd class="aps-text-secondary" style="margin: 0;">{cameraSettings.join(' • ')}</dd>
          </div>
        )}
        
        <!-- Location Information -->
        {photoData.location?.name && (
          <div class="aps-flex aps-flex-col aps-gap-xs">
            <dt class="aps-font-semibold aps-text-primary aps-text-sm">Location</dt>
            <dd class="aps-text-secondary" style="margin: 0;">
              {photoData.location.name}
              {photoData.location.latitude && photoData.location.longitude && (
                <span class="aps-text-xs aps-text-muted aps-mt-xs" style="display: block;">
                  ({photoData.location.latitude.toFixed(4)}, {photoData.location.longitude.toFixed(4)})
                </span>
              )}
            </dd>
          </div>
        )}
        
        <!-- Tags -->
        {photoData.tags.length > 0 && (
          <div class="aps-flex aps-flex-col aps-gap-xs">
            <dt class="aps-font-semibold aps-text-primary aps-text-sm">Tags</dt>
            <dd class="aps-flex aps-gap-sm" style="margin: 0; flex-wrap: wrap;">
              {photoData.tags.map(tag => (
                <a href={`/photos/tags/${tag}`} class="aps-bg-muted aps-text-primary aps-p-xs aps-rounded-sm aps-link aps-text-xs" style="text-decoration: none; transition: background-color 0.2s;">#{tag}</a>
              ))}
            </dd>
          </div>
        )}
      </dl>
    </aside>
    
    <!-- Location Map -->
    {photoData.location?.latitude && photoData.location?.longitude && (
      <section class="aps-border-t aps-mt-2xl" style="padding-top: 2rem;">
        <h2 class="aps-text-2xl aps-font-semibold aps-mb-md aps-text-primary">Where this photo was taken</h2>
        <MapImage 
          latitude={photoData.location.latitude}
          longitude={photoData.location.longitude}
          locationName={photoData.location.name}
          width="100%"
          height="600px"
          zoom={8}
          class="photo-location-map"
        />
      </section>
    )}
    
    <!-- Related Photos -->
    {relatedPhotos.length > 0 && (
      <section class="aps-border-t aps-mt-2xl" style="padding-top: 2rem;">
        <h2 class="aps-text-2xl aps-font-semibold aps-mb-md aps-text-primary">Related Photos</h2>
        <div class="aps-grid aps-gap-md aps-related-grid">
          {relatedPhotos.map(relatedPhoto => (
            <a href={`/photos/${relatedPhoto.id}`} class="aps-link" style="text-decoration: none;">
              <PhotoCard 
                photo={relatedPhoto}
                loading="lazy"
                sizes="(max-width: 768px) 50vw, 25vw"
                class="related-photo"
              />
            </a>
          ))}
        </div>
      </section>
    )}
  </article>
</main>

<!-- Keyboard Navigation Handler -->
<script>
  document.addEventListener('keydown', (e) => {
    if (e.target && (e.target as HTMLElement).tagName === 'INPUT') return;
    
    const prevLink = document.querySelector('.nav-photo.prev') as HTMLAnchorElement;
    const nextLink = document.querySelector('.nav-photo.next') as HTMLAnchorElement;
    
    if (e.key === 'ArrowLeft' && prevLink && !prevLink.classList.contains('disabled')) {
      prevLink.click();
    } else if (e.key === 'ArrowRight' && nextLink && !nextLink.classList.contains('disabled')) {
      nextLink.click();
    }
  });
</script>

<style>
  /* Navigation hover states */
  .aps-photo-nav-link:hover {
    background-color: var(--aps-color-bg-muted);
  }
  
  /* Related photos grid */
  .aps-related-grid {
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  }
  
  /* Responsive behavior */
  @media (max-width: 768px) {
    .aps-photo-nav-container {
      flex-direction: column;
      align-items: stretch;
      gap: 1rem;
    }
    
    .aps-photo-nav-container > div:last-child {
      justify-content: space-between;
    }
    
    .aps-photo-nav-container .aps-photo-nav-link {
      min-width: auto;
      flex: 1;
    }
    
    .aps-related-grid {
      grid-template-columns: repeat(2, 1fr);
    }
  }
</style>