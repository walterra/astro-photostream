---
import type { MultiMarkerMapProps } from '../types.js';
import '../styles/aps-core.css';

interface Props extends MultiMarkerMapProps {}

const { 
  photos, 
  zoom = 10,
  class: className = '',
  hideCaption = false
} = Astro.props;

// Filter photos with valid coordinates
const validPhotos = photos.filter(photo => 
  photo.location?.latitude && photo.location?.longitude
);

// Generate static map with GEOAPIFY_API_KEY
let mapUrl = "";
const shouldShowMap = validPhotos.length > 0 && import.meta.env.GEOAPIFY_API_KEY;

if (shouldShowMap) {
  // Calculate bounds for static map
  const latitudes = validPhotos.map(p => p.location!.latitude!);
  const longitudes = validPhotos.map(p => p.location!.longitude!);

  const bounds = {
    north: Math.max(...latitudes),
    south: Math.min(...latitudes),
    east: Math.max(...longitudes),
    west: Math.min(...longitudes),
  };

  // Add padding - more generous to ensure no markers are cut off
  const latSpan = bounds.north - bounds.south;
  const lonSpan = bounds.east - bounds.west;
  const padding = 0.3; // Increased from 0.1 to 0.3 for better marker visibility

  const paddedLatSpan = Math.max(latSpan * (1 + padding), 0.05); // Minimum span increased
  const paddedLonSpan = Math.max(lonSpan * (1 + padding), 0.05);

  const centerLat = (bounds.north + bounds.south) / 2;
  const centerLon = (bounds.east + bounds.west) / 2;

  const finalBounds = {
    north: centerLat + paddedLatSpan / 2,
    south: centerLat - paddedLatSpan / 2,
    east: centerLon + paddedLonSpan / 2,
    west: centerLon - paddedLonSpan / 2,
  };

  // Build markers - match the working single photo format 
  const markers = validPhotos
    .filter((photo) => photo.location?.longitude && photo.location?.latitude)
    .map(
      (photo) =>
        `lonlat:${photo.location!.longitude},${photo.location!.latitude};type:circle;color:#cb2a42;size:16`
    )
    .join("|");

  // Build Geoapify URL - exactly like reference implementation
  const params = new URLSearchParams({
    style: "klokantech-basic",
    width: "1200",
    height: "400",
    bbox: `${finalBounds.west},${finalBounds.south},${finalBounds.east},${finalBounds.north}`,
    marker: markers,
    scaleFactor: "1",
    format: "png",
    apiKey: import.meta.env.GEOAPIFY_API_KEY,
  });

  mapUrl = `https://maps.geoapify.com/v1/staticmap?${params.toString()}`;
}
---

<div class={`aps-multi-marker-map ${className}`}>
  {validPhotos.length === 0 ? (
    <div class="aps-placeholder aps-text-secondary aps-p-md aps-text-center">
      <svg class="aps-map-icon aps-mb-sm" width="48" height="48" fill="currentColor" viewBox="0 0 20 20">
        <path fill-rule="evenodd" d="M5.05 4.05a7 7 0 119.9 9.9L10 18.9l-4.95-4.95a7 7 0 010-9.9zM10 11a2 2 0 100-4 2 2 0 000 4z" clip-rule="evenodd"></path>
      </svg>
      <p class="aps-text-sm">No location data available for these photos</p>
    </div>
  ) : shouldShowMap && mapUrl ? (
    <!-- Static Geoapify Map (matches reference style) -->
    <div class="aps-multi-marker-map__static">
      <img
        src={mapUrl}
        alt={`Map showing ${validPhotos.length} photo location${validPhotos.length !== 1 ? 's' : ''}`}
        width={1200}
        height={400}
        class="aps-image aps-rounded-lg aps-shadow-sm"
        loading="lazy"
      />
      {!hideCaption && (
        <p class="aps-multi-marker-map__caption aps-text-secondary aps-text-sm aps-mt-xs aps-text-center">
          Map showing {validPhotos.length} photo location{validPhotos.length !== 1 ? 's' : ''}
        </p>
      )}
    </div>
  ) : (
    <div class="aps-placeholder aps-text-secondary aps-p-md aps-text-center">
      <svg class="aps-map-icon aps-mb-sm" width="48" height="48" fill="currentColor" viewBox="0 0 20 20">
        <path fill-rule="evenodd" d="M5.05 4.05a7 7 0 119.9 9.9L10 18.9l-4.95-4.95a7 7 0 010-9.9zM10 11a2 2 0 100-4 2 2 0 000 4z" clip-rule="evenodd"></path>
      </svg>
      <p class="aps-text-sm">Map requires GEOAPIFY_API_KEY</p>
    </div>
  )}
</div>

<style>
  /* Component-specific styles that can't be utilities */
  .aps-multi-marker-map {
    width: 100%;
    border-radius: var(--aps-border-radius, 8px);
    overflow: hidden;
    background: var(--aps-color-bg-secondary, #f3f4f6);
  }
  
  .aps-multi-marker-map__static {
    width: 100%;
    position: relative;
  }
  
  .aps-map-icon {
    width: 32px;
    height: 32px;
    display: block;
    opacity: 0.7;
    margin: 0 auto var(--aps-space-sm);
  }
  
  /* Responsive adjustments */
  @media (max-width: 768px) {
    .aps-map-icon {
      width: 28px;
      height: 28px;
    }
  }
</style>