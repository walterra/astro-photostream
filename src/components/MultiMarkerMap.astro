---
import type { MultiMarkerMapProps } from '../types.js';

interface Props extends MultiMarkerMapProps {}

const { 
  photos, 
  height = '400px',
  zoom = 10,
  class: className = ''
} = Astro.props;

// Filter photos with valid coordinates
const validPhotos = photos.filter(photo => 
  photo.location?.latitude && photo.location?.longitude
);

// Generate static map with GEOAPIFY_API_KEY
let mapUrl = "";
const shouldShowMap = validPhotos.length > 0 && import.meta.env.GEOAPIFY_API_KEY;

if (shouldShowMap) {
  // Calculate bounds for static map
  const latitudes = validPhotos.map(p => p.location!.latitude!);
  const longitudes = validPhotos.map(p => p.location!.longitude!);

  const bounds = {
    north: Math.max(...latitudes),
    south: Math.min(...latitudes),
    east: Math.max(...longitudes),
    west: Math.min(...longitudes),
  };

  // Add padding
  const latSpan = bounds.north - bounds.south;
  const lonSpan = bounds.east - bounds.west;
  const padding = 0.1;

  const paddedLatSpan = Math.max(latSpan * (1 + padding), 0.01);
  const paddedLonSpan = Math.max(lonSpan * (1 + padding), 0.01);

  const centerLat = (bounds.north + bounds.south) / 2;
  const centerLon = (bounds.east + bounds.west) / 2;

  const finalBounds = {
    north: centerLat + paddedLatSpan / 2,
    south: centerLat - paddedLatSpan / 2,
    east: centerLon + paddedLonSpan / 2,
    west: centerLon - paddedLonSpan / 2,
  };

  // Build markers - match the working single photo format 
  const markers = validPhotos
    .filter((photo) => photo.location?.longitude && photo.location?.latitude)
    .map(
      (photo) =>
        `lonlat:${photo.location!.longitude},${photo.location!.latitude};type:circle;color:#cb2a42;size:16`
    )
    .join("|");

  // Build Geoapify URL - exactly like reference implementation
  const params = new URLSearchParams({
    style: "klokantech-basic",
    width: "800",
    height: "400",
    bbox: `${finalBounds.west},${finalBounds.south},${finalBounds.east},${finalBounds.north}`,
    marker: markers,
    scaleFactor: "1",
    format: "png",
    apiKey: import.meta.env.GEOAPIFY_API_KEY,
  });

  mapUrl = `https://maps.geoapify.com/v1/staticmap?${params.toString()}`;
}
---

<div class={`multi-marker-map ${className}`}>
  {validPhotos.length === 0 ? (
    <div class="multi-marker-map__no-data">
      <svg width="48" height="48" fill="currentColor" viewBox="0 0 20 20">
        <path fill-rule="evenodd" d="M5.05 4.05a7 7 0 119.9 9.9L10 18.9l-4.95-4.95a7 7 0 010-9.9zM10 11a2 2 0 100-4 2 2 0 000 4z" clip-rule="evenodd"></path>
      </svg>
      <p>No location data available for these photos</p>
    </div>
  ) : shouldShowMap && mapUrl ? (
    <!-- Static Geoapify Map (matches reference style) -->
    <div class="multi-marker-map__static">
      <img
        src={mapUrl}
        alt={`Map showing ${validPhotos.length} photo location${validPhotos.length !== 1 ? 's' : ''}`}
        width={800}
        height={400}
        class="multi-marker-map__image"
        loading="lazy"
      />
      <p class="multi-marker-map__caption">
        Map showing {validPhotos.length} photo location{validPhotos.length !== 1 ? 's' : ''}
      </p>
    </div>
  ) : (
    <div class="multi-marker-map__no-data">
      <svg width="48" height="48" fill="currentColor" viewBox="0 0 20 20">
        <path fill-rule="evenodd" d="M5.05 4.05a7 7 0 119.9 9.9L10 18.9l-4.95-4.95a7 7 0 010-9.9zM10 11a2 2 0 100-4 2 2 0 000 4z" clip-rule="evenodd"></path>
      </svg>
      <p>Map requires GEOAPIFY_API_KEY</p>
    </div>
  )}
</div>

<style define:vars={{ height }}>
  .multi-marker-map {
    width: 100%;
    height: var(--height);
    border-radius: 8px;
    overflow: hidden;
    background: #f3f4f6;
  }
  
  .multi-marker-map__static {
    width: 100%;
    height: 100%;
    position: relative;
  }
  
  .multi-marker-map__image {
    width: 100%;
    height: 100%;
    object-fit: cover;
    border-radius: 8px;
  }
  
  .multi-marker-map__caption {
    margin-top: 0.5rem;
    font-size: 0.875rem;
    color: #6b7280;
    text-align: center;
  }
  
  .multi-marker-map__no-data {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    height: 100%;
    color: #6b7280;
    text-align: center;
    padding: 2rem;
  }
  
  .multi-marker-map__no-data svg {
    margin-bottom: 1rem;
    opacity: 0.5;
  }
  
  .multi-marker-map__no-data p {
    margin: 0;
    font-size: 0.875rem;
  }
  
  @media (prefers-color-scheme: dark) {
    .multi-marker-map {
      background: #374151;
    }
    
    .multi-marker-map__no-data {
      color: #d1d5db;
    }
    
    .multi-marker-map__caption {
      color: #d1d5db;
    }
  }
  
  /* Responsive adjustments */
  @media (max-width: 768px) {
    .multi-marker-map {
      height: 300px;
    }
    
    .multi-marker-map__no-data {
      padding: 1rem;
    }
  }
</style>