---
import type { MultiMarkerMapProps } from '../types.js';

interface Props extends MultiMarkerMapProps {}

const { 
  photos, 
  height = '400px',
  zoom = 10,
  class: className = ''
} = Astro.props;

// Filter photos with valid coordinates
const validPhotos = photos.filter(photo => 
  photo.location?.coordinates?.latitude && 
  photo.location?.coordinates?.longitude
);

// Calculate map center from photo coordinates
const calculateCenter = () => {
  if (validPhotos.length === 0) return { lat: 0, lng: 0 };
  
  const bounds = validPhotos.reduce((acc, photo) => {
    const { latitude, longitude } = photo.location!.coordinates!;
    return {
      minLat: Math.min(acc.minLat, latitude),
      maxLat: Math.max(acc.maxLat, latitude),
      minLng: Math.min(acc.minLng, longitude),
      maxLng: Math.max(acc.maxLng, longitude)
    };
  }, {
    minLat: validPhotos[0].location!.coordinates!.latitude,
    maxLat: validPhotos[0].location!.coordinates!.latitude,
    minLng: validPhotos[0].location!.coordinates!.longitude,
    maxLng: validPhotos[0].location!.coordinates!.longitude
  });
  
  return {
    lat: (bounds.minLat + bounds.maxLat) / 2,
    lng: (bounds.minLng + bounds.maxLng) / 2
  };
};

const mapCenter = calculateCenter();
const mapId = `map-${Math.random().toString(36).substr(2, 9)}`;
---

<div class={`multi-marker-map ${className}`}>
  {validPhotos.length === 0 ? (
    <div class="multi-marker-map__no-data">
      <svg width="48" height="48" fill="currentColor" viewBox="0 0 20 20">
        <path fill-rule="evenodd" d="M5.05 4.05a7 7 0 119.9 9.9L10 18.9l-4.95-4.95a7 7 0 010-9.9zM10 11a2 2 0 100-4 2 2 0 000 4z" clip-rule="evenodd"></path>
      </svg>
      <p>No location data available for these photos</p>
    </div>
  ) : (
    <div 
      id={mapId}
      class="multi-marker-map__container"
      data-photos={JSON.stringify(validPhotos)}
      data-center={JSON.stringify(mapCenter)}
      data-zoom={zoom}
    >
      <!-- Fallback for when JavaScript is disabled -->
      <noscript>
        <div class="multi-marker-map__fallback">
          <p>Interactive map requires JavaScript</p>
          <ul class="multi-marker-map__locations">
            {validPhotos.map(photo => (
              <li>
                <a href={`/photos/${photo.id}`}>
                  {photo.title || `Photo ${photo.id}`}
                </a>
                {photo.location?.name && (
                  <span> - {photo.location.name}</span>
                )}
              </li>
            ))}
          </ul>
        </div>
      </noscript>
    </div>
  )}
</div>

<script>
  declare global {
    interface Window {
      initPhotoMap?: (mapId: string) => void;
    }
  }
  
  // Initialize map when DOM is ready
  document.addEventListener('DOMContentLoaded', function() {
    const mapContainers = document.querySelectorAll('.multi-marker-map__container');
    
    mapContainers.forEach((container) => {
      const mapId = container.id;
      const photosData = container.getAttribute('data-photos');
      const centerData = container.getAttribute('data-center');
      const zoom = parseInt(container.getAttribute('data-zoom') || '10');
      
      if (!photosData || !centerData) return;
      
      const photos = JSON.parse(photosData);
      const center = JSON.parse(centerData);
      
      // Use Leaflet for the map (lightweight and no API key required)
      loadLeafletMap(mapId, photos, center, zoom);
    });
  });
  
  async function loadLeafletMap(mapId: string, photos: any[], center: {lat: number, lng: number}, zoom: number) {
    // Dynamically load Leaflet CSS and JS
    if (!document.querySelector('link[href*="leaflet"]')) {
      const leafletCSS = document.createElement('link');
      leafletCSS.rel = 'stylesheet';
      leafletCSS.href = 'https://unpkg.com/leaflet@1.9.4/dist/leaflet.css';
      document.head.appendChild(leafletCSS);
    }
    
    if (!window.L) {
      await new Promise((resolve, reject) => {
        const script = document.createElement('script');
        script.src = 'https://unpkg.com/leaflet@1.9.4/dist/leaflet.js';
        script.onload = resolve;
        script.onerror = reject;
        document.head.appendChild(script);
      });
    }
    
    // Initialize the map
    const map = window.L.map(mapId).setView([center.lat, center.lng], zoom);
    
    // Add tile layer (OpenStreetMap)
    window.L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
      attribution: '¬© <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
      maxZoom: 19
    }).addTo(map);
    
    // Create markers for each photo
    photos.forEach(photo => {
      const { latitude, longitude } = photo.location.coordinates;
      const marker = window.L.marker([latitude, longitude]).addTo(map);
      
      // Create popup content
      const popupContent = `
        <div class="photo-popup">
          <h4>${photo.title || `Photo ${photo.id}`}</h4>
          ${photo.description ? `<p>${photo.description}</p>` : ''}
          ${photo.location.name ? `<p><strong>üìç ${photo.location.name}</strong></p>` : ''}
          <a href="/photos/${photo.id}" class="photo-popup__link">View Photo</a>
        </div>
      `;
      
      marker.bindPopup(popupContent);
    });
    
    // Fit map to show all markers if there are multiple
    if (photos.length > 1) {
      const group = new window.L.featureGroup(
        photos.map(photo => 
          window.L.marker([photo.location.coordinates.latitude, photo.location.coordinates.longitude])
        )
      );
      map.fitBounds(group.getBounds().pad(0.1));
    }
  }
</script>

<style define:vars={{ height }}>
  .multi-marker-map {
    width: 100%;
    height: var(--height);
    border-radius: 8px;
    overflow: hidden;
    background: #f3f4f6;
  }
  
  .multi-marker-map__container {
    width: 100%;
    height: 100%;
    position: relative;
  }
  
  .multi-marker-map__no-data {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    height: 100%;
    color: #6b7280;
    text-align: center;
    padding: 2rem;
  }
  
  .multi-marker-map__no-data svg {
    margin-bottom: 1rem;
    opacity: 0.5;
  }
  
  .multi-marker-map__no-data p {
    margin: 0;
    font-size: 0.875rem;
  }
  
  .multi-marker-map__fallback {
    padding: 2rem;
    text-align: center;
  }
  
  .multi-marker-map__fallback p {
    margin-bottom: 1rem;
    color: #6b7280;
  }
  
  .multi-marker-map__locations {
    list-style: none;
    padding: 0;
    margin: 0;
    text-align: left;
    display: inline-block;
  }
  
  .multi-marker-map__locations li {
    margin-bottom: 0.5rem;
  }
  
  .multi-marker-map__locations a {
    color: #3b82f6;
    text-decoration: none;
    font-weight: 500;
  }
  
  .multi-marker-map__locations a:hover {
    text-decoration: underline;
  }
  
  /* Leaflet popup custom styles */
  :global(.photo-popup) {
    min-width: 200px;
  }
  
  :global(.photo-popup h4) {
    margin: 0 0 0.5rem 0;
    font-size: 1rem;
    font-weight: 600;
  }
  
  :global(.photo-popup p) {
    margin: 0.25rem 0;
    font-size: 0.875rem;
    color: #6b7280;
  }
  
  :global(.photo-popup__link) {
    display: inline-block;
    margin-top: 0.75rem;
    padding: 0.5rem 1rem;
    background: #3b82f6;
    color: white;
    text-decoration: none;
    border-radius: 4px;
    font-size: 0.875rem;
    font-weight: 500;
    transition: background-color 0.2s ease;
  }
  
  :global(.photo-popup__link:hover) {
    background: #2563eb;
  }
  
  /* Loading state */
  .multi-marker-map__container:empty::after {
    content: 'Loading map...';
    display: flex;
    align-items: center;
    justify-content: center;
    height: 100%;
    color: #6b7280;
    font-size: 0.875rem;
  }
  
  @media (prefers-color-scheme: dark) {
    .multi-marker-map {
      background: #374151;
    }
    
    .multi-marker-map__no-data {
      color: #d1d5db;
    }
    
    .multi-marker-map__fallback p {
      color: #d1d5db;
    }
  }
  
  /* Responsive adjustments */
  @media (max-width: 768px) {
    .multi-marker-map {
      height: 300px;
    }
    
    .multi-marker-map__no-data {
      padding: 1rem;
    }
    
    .multi-marker-map__fallback {
      padding: 1rem;
    }
  }
</style>